// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider               = "prisma-client-js"
  previewFeatures        = ["postgresqlExtensions", "metrics", "fullTextSearchPostgres"]
  output                 = "../generated/prisma"
  binaryTargets          = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [cube, earthdistance, pg_stat_statements, pgcrypto]
}

// API tokens for an Organization
model ApiToken {
  id String @id @default(dbgenerated("nanoid('tok')"))

  /// @IsString()
  description String

  /// @IsString()
  token String @default(dbgenerated("public.gen_random_uuid() || '-' || public.gen_random_uuid()"))

  expires DateTime @default(now()) @db.Timestamptz()

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@index([token, expires])
  @@map("api_tokens")
}

// Customer tokens for the jobber queue system
model CustomerToken {
  id String @id @default(dbgenerated("nanoid('tok')"))

  /// @IsString()
  token String @unique

  /// @IsString()
  customerId String @map("customer_id")

  /// @IsString()
  description String?

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([token])
  @@index([customerId])
  @@map("customer_tokens")
}
